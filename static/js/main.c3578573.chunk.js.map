{"version":3,"sources":["Components/Menu/index.tsx","Components/Calculator/index.tsx","Main/index.tsx","Components/Routes/index.tsx","serviceWorker.ts","index.tsx"],"names":["withRouter","props","className","onClick","view","history","push","goToView","id","console","log","getView","Routes","Fragment","exact","path","render","from","to","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAqCeA,G,MAAAA,aA9Ba,SAAAC,GAIxB,OACI,yBAAKC,UAAU,kBACX,uEACA,iLAIA,iDACuB,oCADvB,SACyC,yCADzC,QAC+D,mCAD/D,yBAGA,oDACA,wBAAIA,UAAU,QACV,wBACIC,QAAS,kBAhBR,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAChBH,EAAMI,QAAQC,KAAd,WAAuBF,IAgBPG,CAAS,CACLH,KAAM,iBAHlB,gCCQDJ,G,MAAAA,aA1Bc,WACzB,OACI,yBAAKQ,GAAG,aAAaN,UAAU,mBAC3B,sDACA,0JAE2B,yCAF3B,QAEiD,oCAFjD,gBAE0E,kCAF1E,KAIA,mFACA,4BACI,mCACA,2CACA,wCACA,+CAEJ,0SAGiE,qCAHjE,0BAKA,8CCIGF,G,MAAAA,aAnBa,SAAC,GAAuB,IAArBK,EAAoB,EAApBA,QAASD,EAAW,EAAXA,KACpCK,QAAQC,IAAI,UAAWN,EAAM,aAAcC,GAW3C,OACI,yBAAKG,GAAG,OAAON,UAAU,aAXb,SAAC,GACb,OADqC,EAAtBE,MAEX,IAAK,OACD,OAAO,kBAAC,EAAD,CAAMC,QAASA,IAC1B,IAAK,aACD,OAAO,kBAAC,EAAD,MACX,QACI,OAAO,kBAAC,EAAD,CAAMA,QAASA,KAKzBM,CAAQ,CAAEP,cCPRQ,EAZU,WACrB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,OAAQ,kBAAM,kBAAC,EAAD,CAAMZ,KAAK,YACnD,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,cAAcC,OAAQ,kBAAM,kBAAC,EAAD,CAAMZ,KAAK,kBACzD,kBAAC,IAAD,CAAUa,KAAK,IAAIC,GAAG,aCClBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASR,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJS,SAASC,eAAe,SDgItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c3578573.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { viewParam } from '../../Interfaces';\r\n\r\nimport './styles.css';\r\n\r\nconst Menu: React.FC<any> = props => {\r\n    const goToView = ({ view }: viewParam) => {\r\n        props.history.push(`/${view}`);\r\n    };\r\n    return (\r\n        <div className=\"menu-container\">\r\n            <h1>Welcome to our React challenges project</h1>\r\n            <p>\r\n                The idea of this project is use all those new features and best practice that appear each day and learn\r\n                it with practice in a checked environment.\r\n            </p>\r\n            <p>\r\n                This project using <b>React</b> with <b>TypeScript</b> and <b>Jest</b> to create our tests.\r\n            </p>\r\n            <p>Below our challenges:</p>\r\n            <ul className=\"menu\">\r\n                <li\r\n                    onClick={() =>\r\n                        goToView({\r\n                            view: 'calculator',\r\n                        })\r\n                    }\r\n                >\r\n                    Calculator with memory\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter<any, React.FC>(Menu);\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst Calculator: React.FC = () => {\r\n    return (\r\n        <div id=\"calculator\" className=\"calculator-view\">\r\n            <h2>Calculator with memory</h2>\r\n            <p>\r\n                The idea of this challenge is create a calculator using the less code as possible and apply the best\r\n                practices working with <b>TypeScript</b> and <b>React</b> event using <b>CSS</b>.\r\n            </p>\r\n            <p>This calculator should have the basic features like:</p>\r\n            <ul>\r\n                <li>Sum</li>\r\n                <li>Subtraction</li>\r\n                <li>Division</li>\r\n                <li>Multiplication</li>\r\n            </ul>\r\n            <p>\r\n                Some others features that this calculator should have are the possibility to see in their screen all the\r\n                previous operations and a button to clean the screen if the user need, another important thing is the\r\n                style of the calculator, this should be something similar to <b>Matrix</b> with black and green.\r\n            </p>\r\n            <i>Good luck!</i>\r\n            {/* Please insert here tour calculator component **/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter<any, React.FC>(Calculator);\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport Menu from '../Components/Menu';\r\nimport Calculator from '../Components/Calculator';\r\n\r\nimport { viewParam } from '../Interfaces';\r\n\r\nimport './styles.css';\r\n\r\nconst Main: React.FC<any> = ({ history, view }) => {\r\n    console.log('view ->', view, 'history ->', history);\r\n    const getView = ({ view }: viewParam) => {\r\n        switch (view) {\r\n            case 'home':\r\n                return <Menu history={history} />;\r\n            case 'calculator':\r\n                return <Calculator />;\r\n            default:\r\n                return <Menu history={history} />;\r\n        }\r\n    };\r\n    return (\r\n        <div id=\"main\" className=\"main-view\">\r\n            {getView({ view })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter<any, React.FC>(Main);\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport Main from '../../Main';\r\n\r\nconst Routes: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Switch>\r\n                <Route exact path=\"/home\" render={() => <Main view=\"home\" />} />\r\n                <Route exact path=\"/calculator\" render={() => <Main view=\"calculator\" />} />\r\n                <Redirect from=\"/\" to=\"/home\" />\r\n            </Switch>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport Routes from './Components/Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Routes />\n    </BrowserRouter>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}